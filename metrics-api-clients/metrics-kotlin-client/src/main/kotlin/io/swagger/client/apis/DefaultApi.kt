/**
 * Your Application API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.AppIdMetricsBody
import io.swagger.client.models.InlineResponse200
import io.swagger.client.models.InlineResponse2001
import io.swagger.client.models.InlineResponse2002
import io.swagger.client.models.InlineResponse2003
import io.swagger.client.models.InlineResponse201
import io.swagger.client.models.InlineResponse400
import io.swagger.client.models.InlineResponse404
import io.swagger.client.models.InlineResponse4041
import io.swagger.client.models.V1ApplicationsBody

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Get an application by ID
     * Retrieve an application by its ID.
     * @param appId ID of the application to retrieve. 
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ApplicationsAppIdGet(appId: kotlin.String): InlineResponse2001 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/applications/{app_id}".replace("{" + "app_id" + "}", "$appId")
        )
        val response = request<InlineResponse2001>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get metrics for a specific metric of an application
     * Retrieve metrics for a specific metric of an application.
     * @param appId ID of the application. 
     * @param metricName Name of the metric. 
     * @param duration Duration for which the metrics should be aggregated. Available options are hour, day, week, month, quarter, year. Defaulted to &#x27;hour&#x27;.  (optional, default to hour)
     * @return kotlin.Array<InlineResponse2003>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ApplicationsAppIdMetricsMetricNameGet(appId: kotlin.String, metricName: kotlin.String, duration: kotlin.String? = null): kotlin.Array<InlineResponse2003> {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (duration != null) {
                put("duration", listOf(duration.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/applications/{app_id}/metrics/{metric_name}".replace("{" + "app_id" + "}", "$appId").replace("{" + "metric_name" + "}", "$metricName"), query = localVariableQuery
        )
        val response = request<kotlin.Array<InlineResponse2003>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse2003>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add metrics for an application
     * Endpoint to add metrics for a specific application.
     * @param body  
     * @param appId ID of the application to which metrics are being added. 
     * @return InlineResponse2002
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ApplicationsAppIdMetricsPost(body: AppIdMetricsBody, appId: kotlin.String): InlineResponse2002 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/applications/{app_id}/metrics".replace("{" + "app_id" + "}", "$appId")
        )
        val response = request<InlineResponse2002>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2002
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get a list of applications
     * Retrieve a list of applications.
     * @param page Page number for pagination. (optional)
     * @param perPage Number of applications per page for pagination. (optional)
     * @return InlineResponse200
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ApplicationsGet(page: kotlin.Int? = null, perPage: kotlin.Int? = null): InlineResponse200 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (perPage != null) {
                put("per_page", listOf(perPage.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/applications", query = localVariableQuery
        )
        val response = request<InlineResponse200>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create a new application
     * Endpoint to create a new application.
     * @param body  
     * @return InlineResponse201
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ApplicationsPost(body: V1ApplicationsBody): InlineResponse201 {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/applications"
        )
        val response = request<InlineResponse201>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse201
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
