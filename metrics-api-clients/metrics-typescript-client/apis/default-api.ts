/* tslint:disable */
/* eslint-disable */
/**
 * Your Application API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AppIdMetricsBody } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
import { InlineResponse201 } from '../models';
import { InlineResponse400 } from '../models';
import { InlineResponse404 } from '../models';
import { InlineResponse4041 } from '../models';
import { V1ApplicationsBody } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve an application by its ID.
         * @summary Get an application by ID
         * @param {string} appId ID of the application to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsAppIdGet: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiV1ApplicationsAppIdGet.');
            }
            const localVarPath = `/api/v1/applications/{app_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metrics for a specific metric of an application.
         * @summary Get metrics for a specific metric of an application
         * @param {string} appId ID of the application.
         * @param {string} metricName Name of the metric.
         * @param {string} [duration] Duration for which the metrics should be aggregated. Available options are hour, day, week, month, quarter, year. Defaulted to &#x27;hour&#x27;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsAppIdMetricsMetricNameGet: async (appId: string, metricName: string, duration?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiV1ApplicationsAppIdMetricsMetricNameGet.');
            }
            // verify required parameter 'metricName' is not null or undefined
            if (metricName === null || metricName === undefined) {
                throw new RequiredError('metricName','Required parameter metricName was null or undefined when calling apiV1ApplicationsAppIdMetricsMetricNameGet.');
            }
            const localVarPath = `/api/v1/applications/{app_id}/metrics/{metric_name}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"metric_name"}}`, encodeURIComponent(String(metricName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to add metrics for a specific application.
         * @summary Add metrics for an application
         * @param {AppIdMetricsBody} body 
         * @param {string} appId ID of the application to which metrics are being added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsAppIdMetricsPost: async (body: AppIdMetricsBody, appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1ApplicationsAppIdMetricsPost.');
            }
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiV1ApplicationsAppIdMetricsPost.');
            }
            const localVarPath = `/api/v1/applications/{app_id}/metrics`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of applications.
         * @summary Get a list of applications
         * @param {number} [page] Page number for pagination.
         * @param {number} [perPage] Number of applications per page for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsGet: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to create a new application.
         * @summary Create a new application
         * @param {V1ApplicationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApplicationsPost: async (body: V1ApplicationsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV1ApplicationsPost.');
            }
            const localVarPath = `/api/v1/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve an application by its ID.
         * @summary Get an application by ID
         * @param {string} appId ID of the application to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsAppIdGet(appId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1ApplicationsAppIdGet(appId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metrics for a specific metric of an application.
         * @summary Get metrics for a specific metric of an application
         * @param {string} appId ID of the application.
         * @param {string} metricName Name of the metric.
         * @param {string} [duration] Duration for which the metrics should be aggregated. Available options are hour, day, week, month, quarter, year. Defaulted to &#x27;hour&#x27;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsAppIdMetricsMetricNameGet(appId: string, metricName: string, duration?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse2003>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1ApplicationsAppIdMetricsMetricNameGet(appId, metricName, duration, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Endpoint to add metrics for a specific application.
         * @summary Add metrics for an application
         * @param {AppIdMetricsBody} body 
         * @param {string} appId ID of the application to which metrics are being added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsAppIdMetricsPost(body: AppIdMetricsBody, appId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1ApplicationsAppIdMetricsPost(body, appId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of applications.
         * @summary Get a list of applications
         * @param {number} [page] Page number for pagination.
         * @param {number} [perPage] Number of applications per page for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsGet(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1ApplicationsGet(page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Endpoint to create a new application.
         * @summary Create a new application
         * @param {V1ApplicationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsPost(body: V1ApplicationsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1ApplicationsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieve an application by its ID.
         * @summary Get an application by ID
         * @param {string} appId ID of the application to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsAppIdGet(appId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return DefaultApiFp(configuration).apiV1ApplicationsAppIdGet(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve metrics for a specific metric of an application.
         * @summary Get metrics for a specific metric of an application
         * @param {string} appId ID of the application.
         * @param {string} metricName Name of the metric.
         * @param {string} [duration] Duration for which the metrics should be aggregated. Available options are hour, day, week, month, quarter, year. Defaulted to &#x27;hour&#x27;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsAppIdMetricsMetricNameGet(appId: string, metricName: string, duration?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse2003>>> {
            return DefaultApiFp(configuration).apiV1ApplicationsAppIdMetricsMetricNameGet(appId, metricName, duration, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to add metrics for a specific application.
         * @summary Add metrics for an application
         * @param {AppIdMetricsBody} body 
         * @param {string} appId ID of the application to which metrics are being added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsAppIdMetricsPost(body: AppIdMetricsBody, appId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return DefaultApiFp(configuration).apiV1ApplicationsAppIdMetricsPost(body, appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of applications.
         * @summary Get a list of applications
         * @param {number} [page] Page number for pagination.
         * @param {number} [perPage] Number of applications per page for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsGet(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return DefaultApiFp(configuration).apiV1ApplicationsGet(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to create a new application.
         * @summary Create a new application
         * @param {V1ApplicationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApplicationsPost(body: V1ApplicationsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return DefaultApiFp(configuration).apiV1ApplicationsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retrieve an application by its ID.
     * @summary Get an application by ID
     * @param {string} appId ID of the application to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async apiV1ApplicationsAppIdGet(appId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return DefaultApiFp(this.configuration).apiV1ApplicationsAppIdGet(appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve metrics for a specific metric of an application.
     * @summary Get metrics for a specific metric of an application
     * @param {string} appId ID of the application.
     * @param {string} metricName Name of the metric.
     * @param {string} [duration] Duration for which the metrics should be aggregated. Available options are hour, day, week, month, quarter, year. Defaulted to &#x27;hour&#x27;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async apiV1ApplicationsAppIdMetricsMetricNameGet(appId: string, metricName: string, duration?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse2003>>> {
        return DefaultApiFp(this.configuration).apiV1ApplicationsAppIdMetricsMetricNameGet(appId, metricName, duration, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Endpoint to add metrics for a specific application.
     * @summary Add metrics for an application
     * @param {AppIdMetricsBody} body 
     * @param {string} appId ID of the application to which metrics are being added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async apiV1ApplicationsAppIdMetricsPost(body: AppIdMetricsBody, appId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return DefaultApiFp(this.configuration).apiV1ApplicationsAppIdMetricsPost(body, appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of applications.
     * @summary Get a list of applications
     * @param {number} [page] Page number for pagination.
     * @param {number} [perPage] Number of applications per page for pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async apiV1ApplicationsGet(page?: number, perPage?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return DefaultApiFp(this.configuration).apiV1ApplicationsGet(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Endpoint to create a new application.
     * @summary Create a new application
     * @param {V1ApplicationsBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async apiV1ApplicationsPost(body: V1ApplicationsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return DefaultApiFp(this.configuration).apiV1ApplicationsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
