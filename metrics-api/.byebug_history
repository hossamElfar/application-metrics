c
response.body
c
response.body
exit
result.to_json
result[:records].to_json
result[:records].to_a
result[:records]
result
c
parsed_response_body
c
elasticsearch_result = Metric.search(body: query).response
c
metric_name
elasticsearch_result = Metric.search(body: query).response
Metric.reindex
Metric.search_index.delete
Metric.reindex
Metric.count
elasticsearch_result
c
parsed_response_body
c
duration
application_id, metric_name, duration
c
params[:application_id]
params[:id]
params[:duration]
c
response
parsed_response_body
c
parsed_body
c
JSON.parse response.body
response.body
c
response.body
response
c
result
c
result
c
result
c
Metric.reindex
Metric.count
result
c
result
c
result
c
result
c
result
c
result
c
result
c
service.metric_histogram_aggregation(application.id, 'awesome1', duration)
c
result
c
response.status
c
application_id
c
response.body
c
create_metrics_params
c
create_metrics_params.first.to_h
create_metrics_params.first
create_metrics_params.to_h
create_metrics_params.first
create_metrics_params
c
application_id
c
application_id
c
application_id
metrics
c
params.permit(metrics: [:name, :value, :timestamp])[:metrics]
params.permit(metrics: [:name, :value, :timestamp])
params.permit(metrics: [:name, :value])
params.require(metrics: [:name, :value])
params.require(metrics: [:name])
params.require(:metrics)
params.require(:metrics).permit(metrics: [:name])
params.require(:metrics)
params
param
create_metrics_params
c
create_metrics_params
c
metrics
application_id
c
params[:application_id]
params[:metrics]
c
Metric.new(**metric, application_id: Application.last.id).valid?
Metric.new(**metric, application_id: application_id).valid?
Application.create! name: 'aaaa'
Metric.new(**metric, application_id: application_id).valid?
Metric.new(**metric, application_id: application_id)
c
Metric.new(**metric, application_id: application_id)
Metric.new(**metric, application_id: application_id).valid?
Metric.new(**metric, application_id: application_id).errors
c
Metric.new(**metric, application_id: application_id).errors
Metric.new(**metric, application_id: application_id)
Metric.new(**metric, application_id: application_id).valid?
c
Metric.new(**metric, application_id: application_id).valid?
Metric.new(**metric, application_id: application_id)
etric.new(**metric, application_id: application_id)
c
Metric.new(**metric, application_id: Application.first.id).valid?
Metric.new(**metric, application_id: Application.first.id)
Application.create! name: 'aaa'
Application.all
Metric.new(**metric, application_id: Application.first.id)
Metric.new(**metric, application_id: Application.last.id)
Metric.new(**metric, application: Application.last)
Metric.new(metric, application: Application.last)
Metric.new(metric)
metric
Metric.new(metric).errors
c
Metric.new(metric).errors
Metric.new(metric).error
Metric.new(metric).valid?
Metric.new(metric)
metric
c
Metric.new(value: 11, name: 'aa', timestamp: 11).valid?
Metric.new(value: 11, name: 'aa', timestamp: 11, application_id: '11').valid?
Metric.new(value: 11, name: 'aa', timestamp: 11, application_id: '11').errors
c
Metric.new(value: 11, name: 'aa', timestamp: 11, application_id: '11').errors
Metric.new(value: 11, name: 'aa', timestamp: 11, application_id: '11').valid?
c
Metric.new(value: 11, name: 'aa', timestamp: 11, application_id: '11').errors
Metric.new(value: 11, name: 'aa', timestamp: 11, application_id: '11').valid?
Application.new(name: 'aaa').valid?
Application.new.valid?
Application.new
Metric.new(value: 11, name: 'aa', timestamp: 11, application_id: '11').valid?
Metric.new(value: 11, name: 'aa', timestamp: 11).valid?
Metric.new(value: 11, name: 'aa').valid?
Metric.new(value: '11').valid?
Metric.new(value: '11').errors
Metric.new.errors
Metric.new.valid?
Metric.new.save!
Metric.new
Metric.build().errors.messages
Metric.build(**metrics.first, application: Application.first).errors.messages
Metric.build(**metrics.first, application: Application.first).errors
Metric.build(**metrics.first, application: Application.first).valid?
Metric.build(metrics.first).valid?
Metric.build(metrics.first)
Metric.build(metrics.first).errors
Metric.new(timestamp: -1).errors
Metric.new(timestap: -1).errors
Metric.new().errors
Metric.new(metrics.first).errors
Metric.new(metrics.first).errors?
Metric.new(metrics.first).save!
Metric.new(metrics.first).create!
Metric.new(metrics.first)
Metric.new(metrics.first).valid?
Metric.new(**metrics.first, application_id: '11').valid?
Metric.new(metrics.first).valid?
Metric.new(metrics.first)
validate_metrics!(metrics)
metrics
c
ids.map { |id| ["#{id}".gsub('\\x', '')].pack('H*').force_encoding('UTF-8') }
ids
c
[id.gsub('\\x', '')]
[id.gsub('//x', '')]
[id.gsub('//x')]
id = ids.first
[id]
[id.gsub('//x')]
ids.first
ids
ids.map { |id| [id.gsub('//x')].pack('H*').force_encoding('UTF-8') }
ids.map { |id| ["#{id}".gsub('//x')].pack('H*').force_encoding('UTF-8') }
ids
c
ids.ids
ids
c
response.body
c
{ page: page }
c
{ page: page }
page
pagy(Application.all, { page: 1 })
page
pagy(Application.all, { page: 1 })
pagy(Application.all, { page: page })
c
params[:page]
params
c
response.body
c
response.body
c
response.body
c
Application.count
pagy.vars.slice(:page, :items, :count)
pagy, records = pagy(Application.all, {page: page})
c
pagy(Application.all,  {page: 1})
pagy(Application.all, params: {page: 1})
pagy(Application.all)
page(Application.all)
c
response.body
c
response.body
Rails.env
c
Rails.env
Rails
response.body
c
response.body
c
response.body
c
response.body
response
